version: '3.9'

# &设置锚点 https://stackoverflow.com/questions/46641224/what-is-and-in-yaml-mean  https://learnxinyminutes.com/docs/yaml/
x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

volumes:
  # 命名卷 很复杂
  # 1.{}代表空对象 docker会创建一个命名卷为/var/lib/docker/volumes/compose_postgres_data
  postgres_data: {}
  # 2.下面的参数会把 命名卷和主机卷放在一起，则要查找的是配置为使用绑定(bind)安装的命名卷。
  # 如果目录不存在，这样做的缺点是失败，但另一方面，docker可以将空目录初始化为镜像内容(经实验，不会保留数据到镜像中)。
  # /var/lib/docker/volumes/compose_postgres_data 绑定到 /data/docker/postgres文件夹中
  # postgres_data:
  #   driver: local
  #   driver_opts:
  #     device: /data/docker/postgres
  #     type: none
  #     o: bind
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false

services:
  db:
    image: postgres:9.6
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    ports:
      - "5432:5432"
    networks:
      - kong-net
    volumes:
      - postgres_data:/var/lib/postgresql/data
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure
  kong:
    # platform: linux/arm64
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
    networks:
      - kong-net
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "0.0.0.0:8001:8001/tcp"
      - "0.0.0.0:8444:8444/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    # 只读 无法进行拷贝等操作
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - /home/docker/kong:/etc/kong
    security_opt:
      - no-new-privileges
    depends_on:
      - db
  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga" #注意是用户名：密码@数据库服务名称：端口
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - db #依赖db服务
  konga:
    image: pantsel/konga
    environment:
      DB_HOST: ${KONG_PG_HOST:-db}
      DB_PORT: ${KONG_PG_PORT:-5432}
      DB_USER: ${KONG_PG_USER:-kong}
      DB_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      DB_DATABASE: ${KONGA_DATABASE:-konga}
      NODE_ENV: ${NODE_ENV:-production}
    networks:
      - kong-net
    ports:
      - "1337:1337"
    depends_on:
      - db #依赖db服务
